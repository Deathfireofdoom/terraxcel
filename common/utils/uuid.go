package utils

import (
	"crypto/rand"
	"encoding/hex"
	"errors"
	"fmt"
)

// GenerateUUID generates a version 4 UUID as per RFC 4122.
// The function returns the UUID as a string and any error encountered.
func GenerateUUID() (string, error) {
	uuid, err := generateRandomBytes(16)
	if err != nil {
		return "", fmt.Errorf("error generating UUID: %w", err)
	}

	setVersionAndVariant(uuid)

	return formatUUID(uuid), nil
}

// generateRandomBytes generates n random bytes.
// It returns the generated bytes and any error encountered.
func generateRandomBytes(n int) ([]byte, error) {
	bytes := make([]byte, n)
	_, err := rand.Read(bytes)
	if err != nil {
		return nil, errors.New("error generating random bytes")
	}
	return bytes, nil
}

// setVersionAndVariant sets the version (4) and variant (2) of a UUID.
func setVersionAndVariant(uuid []byte) {
	uuid[6] = (uuid[6] & 0x0f) | 0x40
	uuid[8] = (uuid[8] & 0x3f) | 0x80
}

// formatUUID formats a UUID byte slice as a string.
func formatUUID(uuid []byte) string {
	return hex.EncodeToString(uuid)
}
